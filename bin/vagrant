#!/usr/bin/env bash
#
# Bootstrap the vagrant machine
################################################################################
# DO NOT EDIT THIS FILE!                                                       #
################################################################################
USERNAME="$1"
shift
DOCUMENT_ROOT="$1"
shift
DATABASE_PASSWORD="$1"
shift
PHP_VERSION="$1"
shift
PHP_PACKAGES=($@)

if [ -z "$DOCUMENT_ROOT" ] || [ -z "$DATABASE_PASSWORD" ]; then
    echo ">>> Usage: $0 <document root> <database password> <php version> [php package[ php package[ ...]]" 1>&2
    echo "           <document root>        The HTML document root; e.g., /var/www" 1>&2
    echo "           <database password>    The root password for the database" 1>&2
    echo "           <php version>          The PHP version to install" 1>&2
    echo "           [php package]          Zero or more PHP packages to install" 1>&2
    exit 1
fi

echo "-- Gathering configuration values --"
################################################################################
PARAMETERS_FILE=${DOCUMENT_ROOT}/app/config/parameters.yml

if [ ! -f ${PARAMETERS_FILE} ]; then
    echo ">>> $0: Unable to locate $PARAMETERS_FILE" 1>&2
    exit 1
fi

USER_DB_USERNAME=$(grep "database_user" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")
USER_DB_PASSWORD=$(grep "database_password" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")

DATABASE_NAME=$(grep "database_name" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")
DATABASE_CHARSET=$(grep "database_charset" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")
DATABASE_COLLATE=$(grep "database_collate" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")

DATABASE_HOST=$(grep "database_host" ${PARAMETERS_FILE} | awk -F": " {'print $2'} | tr -d "'")

echo "    Using Configuration from ${PARAMETERS_FILE}:"
echo "        - database_user:        $USER_DB_USERNAME"
echo "        - database_password:    $USER_DB_PASSWORD"
echo "        - database_name:        $DATABASE_NAME"
echo "        - database_charset:     $DATABASE_CHARSET"
echo "        - database_collate:     $DATABASE_COLLATE"
echo "        - database_host:        $DATABASE_HOST"
echo ""
################################################################################

echo "-- Updating packages list --"
################################################################################
DEBIAN_FRONTEND=noninteractive apt-get -qq update > /dev/null 2>&1
DEBIAN_FRONTEND=noninteractive apt-get -qq upgrade > /dev/null 2>&1
################################################################################

echo "-- Performing house-cleaning work --"
################################################################################
DEBIAN_FRONTEND=noninteractive apt-get autoremove -qq > /dev/null 2>&1
DEBIAN_FRONTEND=noninteractive apt-get remove -qq apache2 > /dev/null 2>&1
################################################################################

echo "-- Initializing MySQL --"
################################################################################
echo "        - Root Password:        $DATABASE_PASSWORD"
echo "mysql-server-5.7 mysql-server/root_password password $DATABASE_PASSWORD" | debconf-set-selections
echo "mysql-server-5.7 mysql-server/root_password_again password $DATABASE_PASSWORD" | debconf-set-selections

# The person who created this box set the password to 'omibee'; fix this:
MYSQL_PWD="omibee" mysqladmin -u root password $DATABASE_PASSWORD >/dev/null 2>&1

echo ""
################################################################################

echo "-- Configuring MySQL --"
################################################################################
MYSQLD_CONF="/etc/mysql/mysql.conf.d/mysqld.cnf"
MYSQL_CONF="/etc/mysql/conf.d/mysql.cnf"

[ "x$(grep character-set-server ${MYSQLD_CONF})" = "x" ] &&
    echo "character-set-server  = $DATABASE_CHARSET" >> ${MYSQLD_CONF}

[ "x$(grep collation-server ${MYSQLD_CONF})" = "x" ] &&
    echo "collation-server      = $DATABASE_COLLATE" >> ${MYSQLD_CONF}

[ "x$(grep default-character-set ${MYSQL_CONF})" = "x" ] &&
    echo "default-character-set = $DATABASE_CHARSET" >> ${MYSQL_CONF}

service mysql restart >/dev/null 2>&1
################################################################################

echo "-- Creating database \"${DATABASE_NAME}\" --"
################################################################################
# Using MYSQL_PWD below prevents mysql from emitting a warning about the password
cat <<EOF | MYSQL_PWD="$DATABASE_PASSWORD" mysql -h "$DATABASE_HOST" -u root
CREATE DATABASE IF NOT EXISTS ${DATABASE_NAME}
    DEFAULT CHARACTER SET   = "${DATABASE_CHARSET}"
    DEFAULT COLLATE         = "${DATABASE_COLLATE}";
EOF
################################################################################

echo "-- Creating database user \"${USER_DB_USERNAME}\" --"
################################################################################
cat <<EOF | MYSQL_PWD="$DATABASE_PASSWORD" mysql -h "$DATABASE_HOST" -u root
GRANT ALL PRIVILEGES ON ${DATABASE_NAME}.* TO "${USER_DB_USERNAME}"@"${DATABASE_HOST}"
    IDENTIFIED BY "${USER_DB_PASSWORD}";
EOF
################################################################################

echo "-- Installing nginx-lite --"
################################################################################
DEBIAN_FRONTEND=noninteractive apt-get -qq install nginx-light > /dev/null 2>&1
cp -f ${DOCUMENT_ROOT}/etc/nginx/nginx.conf /etc/nginx/nginx.conf
cp -f ${DOCUMENT_ROOT}/etc/nginx/www.devel /etc/nginx/sites-available/www.devel
ln -sf /etc/nginx/sites-available/www.devel /etc/nginx/sites-enabled/www
rm -rf ${DOCUMENT_ROOT}/html

# Convert the document root into the systemctl service mount
SERVICE_MOUNT=${DOCUMENT_ROOT:1:${#DOCUMENT_ROOT}}
SERVICE_MOUNT=${SERVICE_MOUNT/\//-}

sed -i "s/WantedBy=multi-user.target/WantedBy=${SERVICE_MOUNT}.mount/" /lib/systemd/system/nginx.service
systemctl daemon-reload >/dev/null 2>&1
systemctl disable nginx.service >/dev/null 2>&1
systemctl enable nginx.service >/dev/null 2>&1
service nginx restart
################################################################################

echo "-- Installing php-fpm v${PHP_VERSION} --"
################################################################################
echo "    Packages to install:"
for (( i=0; $i < ${#PHP_PACKAGES[@]}; i=$i+1 )); do
    echo "        - ${PHP_PACKAGES[$i]}"
done

TMPFILE="/tmp/vagrant-php-install-$(date "+%Y-%m-%dT%H:%M:%S").log"
DEBIAN_FRONTEND=noninteractive apt-get -qq install php${PHP_VERSION}-fpm php${PHP_VERSION}-cli ${PHP_PACKAGES[@]} > $TMPFILE 2>&1

if [ $? -gt 0 ]; then
    echo "Unable to install PHP ${PHP_VERSION}:"
    cat $TMPFILE > /dev/stderr
    exit 2
fi

cp -f ${DOCUMENT_ROOT}/etc/php/php.ini /etc/php/${PHP_VERSION}/fpm/php.ini
sed -e s/%PHP_VERSION%/${PHP_VERSION}/g ${DOCUMENT_ROOT}/etc/php/php-fpm.conf > /etc/php/${PHP_VERSION}/fpm/php-fpm.conf
cp -f ${DOCUMENT_ROOT}/etc/php/www.conf /etc/php/${PHP_VERSION}/fpm/pool.d/www.conf
rm -f /etc/php/${PHP_VERSION}/fpm/conf.d/10-opcache.ini
rm -f /etc/php/${PHP_VERSION}/cli/conf.d/10-opcache.ini

# Convert the document root into the systemctl service mount
SERVICE_MOUNT=${DOCUMENT_ROOT:1:${#DOCUMENT_ROOT}}
SERVICE_MOUNT=${SERVICE_MOUNT/\//-}

sed -i "s/WantedBy=multi-user.target/WantedBy=${SERVICE_MOUNT}.mount/" /lib/systemd/system/php${PHP_VERSION}-fpm.service
systemctl daemon-reload >/dev/null 2>&1
systemctl disable php${PHP_VERSION}-fpm.service >/dev/null 2>&1
systemctl enable php${PHP_VERSION}-fpm.service >/dev/null 2>&1
service php${PHP_VERSION}-fpm restart
echo ""
################################################################################

echo "-- Installing local user extras --"
################################################################################
cp ${DOCUMENT_ROOT}/etc/bash/profile /home/${USERNAME}/.profile
chown ${USERNAME}:${USERNAME} /home/${USERNAME}/.profile
################################################################################

echo "-- Installing Initial Doctrine database schemata --"
################################################################################
cd ${DOCUMENT_ROOT}/
${DOCUMENT_ROOT}/bin/console doctrine:schema:update -f -n
################################################################################

echo "-- Finished: Good luck! --"

echo ""
echo "Run bin/tunnel to connect to both nginx and mysql"
